param(
    [string]$OutFile = '.env.ports',
    [switch]$Force,
    [switch]$Quiet
)

. "$PSScriptRoot/common.ps1"

$root = Get-RepoRoot
$fullPath = if ([System.IO.Path]::IsPathRooted($OutFile)) {
    $OutFile
} else {
    Join-Path $root $OutFile
}

if (-not $Force.IsPresent -and (Test-Path $fullPath)) {
    if (-not $Quiet.IsPresent) {
        Write-Status -Level 'INFO' -Message "Using existing $((Resolve-Path $fullPath).Path). Use -Force to regenerate."
    }
    return
}

$portSpecs = @(
    @{ Name = 'HOST_CLIENTES_PORT'; Default = 8000 }
    @{ Name = 'HOST_CATALOGO_PORT'; Default = 8001 }
    @{ Name = 'HOST_FACTURACION_PORT'; Default = 8002 }
    @{ Name = 'HOST_PAGOS_PORT'; Default = 8003 }
    @{ Name = 'HOST_WHATSAPP_PORT'; Default = 8011 }
    @{ Name = 'HOST_ORQ_PORT'; Default = 8010 }
    @{ Name = 'HOST_PORTAL_CLIENTE_PORT'; Default = 5173 }
    @{ Name = 'HOST_PORTAL_TECNICO_PORT'; Default = 5174 }
    @{ Name = 'HOST_PORTAL_FACTURACION_PORT'; Default = 8091 }
    @{ Name = 'HOST_BACKOFFICE_PORT'; Default = 8089 }
    @{ Name = 'HOST_POSTGRES_PORT'; Default = 5432 }
    @{ Name = 'HOST_REDIS_PORT'; Default = 6379 }
    @{ Name = 'HOST_ZOOKEEPER_PORT'; Default = 2181 }
    @{ Name = 'HOST_KAFKA_PORT_1'; Default = 29092 }
    @{ Name = 'HOST_KAFKA_PORT_2'; Default = 29093 }
    @{ Name = 'HOST_KEYCLOAK_PORT'; Default = 8080 }
    @{ Name = 'HOST_JAEGER_UI_PORT'; Default = 16686 }
    @{ Name = 'HOST_JAEGER_THRIFT_PORT'; Default = 14268 }
    @{ Name = 'HOST_OTLP_GRPC_PORT'; Default = 4317 }
    @{ Name = 'HOST_OTLP_HTTP_PORT'; Default = 4318 }
    @{ Name = 'HOST_PROMETHEUS_PORT'; Default = 9090 }
    @{ Name = 'HOST_GRAFANA_PORT'; Default = 3000 }
    @{ Name = 'HOST_LOKI_PORT'; Default = 3100 }
    @{ Name = 'HOST_TEMPO_PORT'; Default = 3200 }
    @{ Name = 'HOST_MINIO_API_PORT'; Default = 9000 }
    @{ Name = 'HOST_MINIO_CONSOLE_PORT'; Default = 9001 }
)

Write-Status -Level 'RUN' -Message "Asignando puertos libres y generando $(Split-Path -Leaf $fullPath)..."

function Test-PortFree {
    param([int]$Port)

    $addresses = @([System.Net.IPAddress]::Loopback)
    if ([System.Net.Sockets.Socket]::OSSupportsIPv6) {
        $addresses += [System.Net.IPAddress]::IPv6Loopback
    }

    foreach ($addr in $addresses) {
        $listener = $null
        try {
            $listener = [System.Net.Sockets.TcpListener]::new($addr, $Port)
            $listener.Start()
        } catch {
            if ($listener) {
                $listener.Stop()
            }
            return $false
        } finally {
            if ($listener) {
                $listener.Stop()
            }
        }
    }
    return $true
}

$reserved = [System.Collections.Generic.HashSet[int]]::new()
$results = @{}

foreach ($spec in $portSpecs) {
    $name = $spec.Name
    $startingPort = [int]$spec.Default
    $fromEnv = [System.Environment]::GetEnvironmentVariable($name)
    $candidate = $null

    if ($fromEnv) {
        try {
            $candidateValue = [int]$fromEnv
            if (-not $reserved.Contains($candidateValue) -and (Test-PortFree -Port $candidateValue)) {
                $candidate = $candidateValue
            }
        } catch {
            # ignore invalid numeric formats
        }
    }

    if (-not $candidate) {
        $port = $startingPort
        while ($true) {
            if (-not $reserved.Contains($port) -and (Test-PortFree -Port $port)) {
                $candidate = $port
                break
            }
            $port++
        }
    }

    $reserved.Add($candidate) | Out-Null
    $results[$name] = $candidate
}

$header = "# Generated by scripts/allocate_ports.ps1 on $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
$lines = @($header)
foreach ($kvp in $results.GetEnumerator() | Sort-Object Name) {
    $lines += ('{0}={1}' -f $kvp.Key, $kvp.Value)
}

$dir = Split-Path -Parent $fullPath
if ($dir) {
    Ensure-Directory -Path $dir
}

Set-Content -Path $fullPath -Value $lines -Encoding ascii

Write-Status -Level 'OK' -Message "Puertos asignados en $((Resolve-Path $fullPath).Path)"

if (-not $Quiet.IsPresent) {
    Write-Host ''
    Write-Host 'Resumen de puertos asignados:'
    foreach ($kvp in $results.GetEnumerator() | Sort-Object Name) {
        Write-Host ("  - {0,-28} {1}" -f $kvp.Key, $kvp.Value)
    }
}
