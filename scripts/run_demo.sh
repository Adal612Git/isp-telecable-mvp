#!/usr/bin/env bash
set -euo pipefail

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
LOG_DIR="$ROOT_DIR/logs"
LOG_FILE="$LOG_DIR/run_demo.log"
PORT_FILE="$ROOT_DIR/.env.ports"
mkdir -p "$LOG_DIR"

log() {
  local message="$1"
  local timestamp
  timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
  echo "[$timestamp] $message" | tee -a "$LOG_FILE"
}

log "üöÄ Iniciando run_demo.sh"

is_port_free() {
  local port="$1"
  if command -v ss >/dev/null 2>&1; then
    ! ss -ltn "( sport = :$port )" | awk 'NR>1' | grep -q .
  else
    ! lsof -iTCP:"$port" -sTCP:LISTEN >/dev/null 2>&1
  fi
}

declare -A DEFAULT_PORTS=(
  [HOST_CLIENTES_PORT]=3300
  [HOST_TECH_PORT]=3400
  [HOST_SALES_PORT]=3500
  [HOST_ROUTER_SIM_PORT]=3600
  [HOST_CLIENTES_API_PORT]=3700
)

# Reuse existing ports when available
declare -A EXISTING_PORTS
if [[ -f "$PORT_FILE" ]]; then
  while IFS='=' read -r key value; do
    [[ -z "$key" || "$key" == \#* ]] && continue
    EXISTING_PORTS[$key]="$value"
  done < "$PORT_FILE"
fi

declare -A PORTS
declare -A USED

reserve_port() {
  local key="$1"
  local start="${EXISTING_PORTS[$key]:-${DEFAULT_PORTS[$key]}}"
  local port="$start"
  while :; do
    if [[ -n "${USED[$port]:-}" ]]; then
      port=$((port + 1))
      continue
    fi
    if is_port_free "$port"; then
      USED[$port]=1
      PORTS[$key]="$port"
      return
    fi
    port=$((port + 1))
  done
}

for key in "${!DEFAULT_PORTS[@]}"; do
  reserve_port "$key"
  log "üì° Puerto ${key} ‚Üí ${PORTS[$key]}"
done

write_env_file() {
  {
    echo "# Generated by scripts/run_demo.sh on $(date)"
    for key in HOST_CLIENTES_PORT HOST_TECH_PORT HOST_SALES_PORT HOST_ROUTER_SIM_PORT HOST_CLIENTES_API_PORT; do
      echo "$key=${PORTS[$key]}"
    done
  } > "$PORT_FILE"
}

ensure_node_modules() {
  local dir="$1"
  if [[ ! -d "$dir/node_modules" ]]; then
    log "üì¶ instalando dependencias npm en ${dir}"
    (cd "$dir" && npm install) >> "$LOG_FILE" 2>&1
  fi
}

install_python_requirements() {
  local req_file="$1"
  if [[ -f "$req_file" ]]; then
    log "üêç instalando dependencias Python desde ${req_file}"
    python -m pip install --quiet -r "$req_file" >> "$LOG_FILE" 2>&1
  fi
}

start_process() {
  local name="$1"
  shift
  local pid_file="$LOG_DIR/${name}.pid"
  local log_file="$LOG_DIR/${name}.service.log"

  if [[ -f "$pid_file" ]]; then
    local pid
    pid=$(cat "$pid_file")
    if ps -p "$pid" >/dev/null 2>&1; then
      log "‚Ü∫ ${name} ya se est√° ejecutando (PID ${pid})"
      return 0
    fi
    rm -f "$pid_file"
  fi

  log "‚ñ∂Ô∏è  Iniciando ${name}"
  nohup "$@" >> "$log_file" 2>&1 &
  local pid=$!
  echo "$pid" > "$pid_file"
  sleep 1
  if ! ps -p "$pid" >/dev/null 2>&1; then
    log "‚ùå ${name} no pudo iniciar. Revisa ${log_file}"
    return 1
  fi
  log "‚úÖ ${name} iniciado (PID ${pid})"
}

stop_process() {
  local name="$1"
  local pid_file="$LOG_DIR/${name}.pid"
  if [[ -f "$pid_file" ]]; then
    local pid
    pid=$(cat "$pid_file")
    if ps -p "$pid" >/dev/null 2>&1; then
      kill "$pid" >/dev/null 2>&1 || true
      wait "$pid" 2>/dev/null || true
    fi
    rm -f "$pid_file"
  fi
}

wait_for_http() {
  local url="$1"
  local name="$2"
  local retries=20
  while (( retries > 0 )); do
    if curl -fsS "$url" >/dev/null 2>&1; then
      log "‚úÖ ${name} disponible en ${url}"
      return 0
    fi
    sleep 1
    retries=$((retries - 1))
  done
  log "‚ö†Ô∏è  ${name} no respondi√≥ en ${url}"
  return 1
}

# Install backend dependencies (idempotent)
install_python_requirements "$ROOT_DIR/services/clientes/requirements.txt"
install_python_requirements "$ROOT_DIR/services/router_simulator/requirements.txt"

# Ensure front-end dependencies
ensure_node_modules "$ROOT_DIR/apps/portal-cliente"
ensure_node_modules "$ROOT_DIR/apps/portal-tecnico"
ensure_node_modules "$ROOT_DIR/apps/portal-ventas"

PYTHONPATH="$ROOT_DIR"

# Start router simulator with retry on port conflict
start_router_sim() {
  local attempts=0
  while (( attempts < 3 )); do
    local port="${PORTS[HOST_ROUTER_SIM_PORT]}"
    start_process "router-simulator" env \
      PORTAL_CLIENTE_ORIGIN="http://localhost:${PORTS[HOST_CLIENTES_PORT]}" \
      PORTAL_TECNICO_ORIGIN="http://localhost:${PORTS[HOST_TECH_PORT]}" \
      PORTAL_VENTAS_ORIGIN="http://localhost:${PORTS[HOST_SALES_PORT]}" \
      PYTHONPATH="$PYTHONPATH" \
      python -m uvicorn services.router_simulator.app.main:app --host 0.0.0.0 --port "$port" || true

    if wait_for_http "http://localhost:${port}/health" "router-simulator"; then
      return
    fi
    attempts=$((attempts + 1))
    log "üîÅ Reintentando router-simulator con un puerto diferente"
    stop_process "router-simulator"
    reserve_port HOST_ROUTER_SIM_PORT
  done
  log "‚ùå No fue posible iniciar router-simulator"
  exit 1
}

start_router_sim

# Start clientes API (FastAPI + SQLite for demo)
start_process "clientes-api" env \
  PYTHONPATH="$PYTHONPATH" \
  ROUTER_SIMULATOR_URL="http://localhost:${PORTS[HOST_ROUTER_SIM_PORT]}" \
  DATABASE_URL="sqlite:///${ROOT_DIR}/logs/clientes_demo.db" \
  uvicorn services.clientes.app.main:app --host 0.0.0.0 --port "${PORTS[HOST_CLIENTES_API_PORT]}"

wait_for_http "http://localhost:${PORTS[HOST_CLIENTES_API_PORT]}/health" "clientes-api"

# Start frontends
start_process "portal-cliente" bash -lc \
  "cd '$ROOT_DIR/apps/portal-cliente' && VITE_API_CLIENTES_URL=http://localhost:${PORTS[HOST_CLIENTES_API_PORT]} VITE_ROUTER_SIM_URL=http://localhost:${PORTS[HOST_ROUTER_SIM_PORT]} npm run dev -- --host 0.0.0.0 --port ${PORTS[HOST_CLIENTES_PORT]}"

start_process "portal-tecnico" bash -lc \
  "cd '$ROOT_DIR/apps/portal-tecnico' && VITE_API_CLIENTES_URL=http://localhost:${PORTS[HOST_CLIENTES_API_PORT]} VITE_ROUTER_SIM_URL=http://localhost:${PORTS[HOST_ROUTER_SIM_PORT]} npm run dev -- --host 0.0.0.0 --port ${PORTS[HOST_TECH_PORT]}"

start_process "portal-ventas" bash -lc \
  "cd '$ROOT_DIR/apps/portal-ventas' && npm run dev -- --host 0.0.0.0 --port ${PORTS[HOST_SALES_PORT]}"

write_env_file

log "üìÑ Variables escritas en ${PORT_FILE}"

CLIENT_URL="http://localhost:${PORTS[HOST_CLIENTES_PORT]}/cliente"
TECH_URL="http://localhost:${PORTS[HOST_TECH_PORT]}/tecnico"
SALES_URL="http://localhost:${PORTS[HOST_SALES_PORT]}/ventas"
API_HEALTH="http://localhost:${PORTS[HOST_CLIENTES_API_PORT]}/health"
SIM_HEALTH="http://localhost:${PORTS[HOST_ROUTER_SIM_PORT]}/health"

log "üåê Servicios disponibles:" 
log "  - Portal Cliente:   ${CLIENT_URL}"
log "  - Portal T√©cnico:   ${TECH_URL}"
log "  - Portal Ventas:    ${SALES_URL}"
log "  - Clientes API:     ${API_HEALTH}"
log "  - Router Simulator: ${SIM_HEALTH}"

if command -v xdg-open >/dev/null 2>&1; then
  xdg-open "$CLIENT_URL" >/dev/null 2>&1 &
  xdg-open "$TECH_URL" >/dev/null 2>&1 &
  xdg-open "$SALES_URL" >/dev/null 2>&1 &
fi

cat <<SUMMARY

URLs sugeridas:
  Cliente:   ${CLIENT_URL}
  T√©cnico:   ${TECH_URL}
  Ventas:    ${SALES_URL}

Para detener servicios: usa "pkill -f portal-cliente", etc. Logs en ${LOG_DIR}.
Para tests Playwright: ejecuta "source ${PORT_FILE}" y luego "cd Tests/e2e && npx playwright test".

SUMMARY
