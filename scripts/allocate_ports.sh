#!/usr/bin/env bash
set -euo pipefail

# Dynamic port allocator for docker-compose.
# - Scans for free host ports starting from sensible defaults
# - Writes an env file (default: .env.ports) with HOST_* variables
# - Shows a simple progress indicator and a summary
#
# Usage:
#   scripts/allocate_ports.sh [--write FILE] [--quiet] [--force] [--no-progress]
#

OUT_FILE=".env.ports"
QUIET=0
FORCE=0
PROGRESS=1

while [[ $# -gt 0 ]]; do
  case "$1" in
    --write)
      OUT_FILE="$2"; shift 2 ;;
    --quiet|-q)
      QUIET=1; shift ;;
    --force|-f)
      FORCE=1; shift ;;
    --no-progress)
      PROGRESS=0; shift ;;
    *)
      echo "Unknown arg: $1" >&2; exit 2 ;;
  esac
done

ROOT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)
cd "$ROOT_DIR"

if [[ -f "$OUT_FILE" && $FORCE -eq 0 ]]; then
  [[ $QUIET -eq 1 ]] || echo "ℹ️  Using existing $OUT_FILE (pass --force to regenerate)"
  exit 0
fi

# Check if a TCP port is free on localhost
is_port_free() {
  local port="$1"
  # Try ss; fallback to lsof
  if command -v ss >/dev/null 2>&1; then
    ! ss -ltn "( sport = :$port )" | awk 'NR>1' | grep -q .
  else
    ! lsof -i TCP:"$port" -sTCP:LISTEN >/dev/null 2>&1
  fi
}

reserve_port() {
  local var="$1"; shift
  local start="$1"; shift
  local port="$start"

  # Avoid duplicates within this run
  while :; do
    if [[ -n "${RESERVED["$port"]+x}" ]]; then
      port=$((port+1)); continue
    fi
    if is_port_free "$port"; then
      RESERVED["$port"]=1
      eval "$var=$port"
      return 0
    fi
    port=$((port+1))
  done
}

declare -A RESERVED

# Define variables and defaults (must match docker-compose files)
VARS=(
  HOST_CLIENTES_PORT:8000
  HOST_CATALOGO_PORT:8001
  HOST_FACTURACION_PORT:8002
  HOST_PAGOS_PORT:8003
  HOST_WHATSAPP_PORT:8011
  HOST_ORQ_PORT:8010
  HOST_PORTAL_CLIENTE_PORT:5173
  HOST_PORTAL_TECNICO_PORT:5174
  HOST_BACKOFFICE_PORT:8089
  HOST_PORTAL_FACTURACION_PORT:8091
  HOST_POSTGRES_PORT:5432
  HOST_REDIS_PORT:6379
  HOST_ZOOKEEPER_PORT:2181
  HOST_KAFKA_PORT_1:29092
  HOST_KAFKA_PORT_2:29093
  HOST_KEYCLOAK_PORT:8080
  HOST_JAEGER_UI_PORT:16686
  HOST_JAEGER_THRIFT_PORT:14268
  HOST_OTLP_GRPC_PORT:4317
  HOST_OTLP_HTTP_PORT:4318
  HOST_PROMETHEUS_PORT:9090
  HOST_GRAFANA_PORT:3000
  HOST_LOKI_PORT:3100
  HOST_TEMPO_PORT:3200
  HOST_MINIO_API_PORT:9000
  HOST_MINIO_CONSOLE_PORT:9001
)

TOTAL=${#VARS[@]}
DONE=0

progress() {
  [[ $PROGRESS -eq 1 && $QUIET -eq 0 ]] || return 0
  local p=$(( (DONE*100)/TOTAL ))
  local bar_width=24
  local filled=$(( (p*bar_width)/100 ))
  local empty=$(( bar_width - filled ))
  printf "\r🔎 Reservando puertos: %3d%% [%s%s]" "$p" "$(printf '#%.0s' $(seq 1 $filled))" "$(printf '.%.0s' $(seq 1 $empty))"
}

[[ $QUIET -eq 1 ]] || echo "🔧 Buscando puertos libres y generando $OUT_FILE..."
progress

for spec in "${VARS[@]}"; do
  var="${spec%%:*}"
  def="${spec##*:}"
  if [[ -n "${!var:-}" ]]; then
    # Preseeded from the environment; accept as-is but avoid duplicates
    port="${!var}"
    if [[ -n "${RESERVED["$port"]+x}" ]]; then
      # Collision; reallocate
      reserve_port "$var" "$def"
    else
      RESERVED["$port"]=1
    fi
  else
    reserve_port "$var" "$def"
  fi
  DONE=$((DONE+1))
  progress
done

[[ $QUIET -eq 1 ]] || echo -e "\r✅ Puertos asignados. Escribiendo $OUT_FILE            "

{
  echo "# Generated by scripts/allocate_ports.sh on $(date)"
  for spec in "${VARS[@]}"; do
    var="${spec%%:*}"
    echo "$var=${!var}"
  done
} > "$OUT_FILE"

[[ $QUIET -eq 1 ]] || {
  echo ""
  echo "Resumen de puertos asignados:"
  for spec in "${VARS[@]}"; do
    var="${spec%%:*}"
    printf "  - %-26s %s\n" "$var" "${!var}"
  done
}

exit 0
